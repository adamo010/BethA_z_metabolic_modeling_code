growth_rates_subset2_averaged <- growth_rates_subset2_averaged[ , ! names(growth_rates_subset2_averaged) %in% c("sorting_col")]
growth_rates_subset2_wide <- spread(growth_rates_subset2_averaged, OTU_ID, growth_rate_difference)
growth_rates_subset2_wide <- spread(growth_rates_subset2_averaged, family_genus, av_growth_rate_difference)
View(growth_rates_subset_wide)
View(growth_rates_subset2_averaged)
growth_rates_subset2_wide <- spread(growth_rates_subset2_averaged, family_genus, av_growth_rate_difference)
View(growth_rates_subset2_wide)
View(growth_rates_subset2_wide)
growth_rates_for_correlating <- growth_rates_subset2_wide %>% select(top_genera_names)
growth_rates_for_correlating <- growth_rates_subset2_wide %>% select(all_of(top_genera_names))
top_genera_names
rownames(growth_rates_subset2_wide) <- growth_rates_subset2_wide[,1] #Assigning row names from 1st column
growth_rates_subset2_wide <- column_to_rownames(growth_rates_subset2_wide, loc = 1)
View(growth_rates_subset2_wide)
growth_rates_subset2_wide <- growth_rates_subset2_wide[-1]
row.names(growth_rates_subset2_wide) <- growth_rates_subset2_wide$Patient_Blind_ID
View(growth_rates_subset_wide)
View(growth_rates_subset2_wide)
growth_rates_subset2_wide <- spread(growth_rates_subset2_averaged, family_genus, av_growth_rate_difference)
column_to_rownames(growth_rates_subset2_wide, var = "Patient_Blind_ID")
growth_rates_subset2_wide <- column_to_rownames(growth_rates_subset2_wide, var = "Patient_Blind_ID")
View(growth_rates_subset2_wide)
growth_rates_for_correlating <- growth_rates_subset2_wide %>% select(all_of(top_genera_names))
View(growth_rates_for_correlating)
View(top_host_gene_expression)
View(top_host_gene_expression)
top_gene_names <- pull(top_host_gene_expression,X1) #make a vector from a column:thanks dplyr!
top_gene_names
View(host_gene_expression)
library("ggplot2")
library("readxl")
library("dplyr")
library("tidyverse")
library("ggpubr")
library("ape")
library("lme4")
library("gplots")
library("plotly")
library("tidyr")
library("vegan")
GR_by_family_point_one <- read_csv("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Common_growth_medium_runs/EU_MM_post_modeling_analyses/02.11.21_EUstd_diet_TD0.1_collapsed_to_family.csv")
GR_by_family_point_one$Patient_Blind_ID <- as.factor(GR_by_family_point_one$Patient_Blind_ID)
#Step 2: reorder and add columns for filtering and stats
#colnames(GR_by_family_point_one) #use as needed
GR_by_family_point_one <- GR_by_family_point_one[, c(1,2,3,4,5,6,10,7,8,9,11,12,13)]
family_point_one_paired <- GR_by_family_point_one  %>% unite("sorting_col", family:Patient_Blind_ID, remove = FALSE)
family_point_one_paired_only <- subset(family_point_one_paired,duplicated(sorting_col) | duplicated(sorting_col, fromLast=TRUE))
#Step 3: split into multiple dataframes by family and do stats on each family
split_0.1_GR_family <- split(family_point_one_paired_only, with(family_point_one_paired_only, interaction(family)), drop = TRUE)
family_0.1_stats <- lapply(split_0.1_GR_family, function(df){wilcox.test(mean_family_GR~Description, data=df, exact= FALSE, paired= TRUE)})
#step 4: make lists of p values
family_0.1_pvals <- c() #can I just do this to initialize the vector? Yes. Otherwise, without this, get an error "family_0.1_pvals not found"
for (elem in family_0.1_stats){
new_value = elem$p.value
family_0.1_pvals <- c(family_0.1_pvals, new_value)}
rm(new_value)
family_0.1_qvals <- p.adjust(family_0.1_pvals, method = "fdr")
#step 6: make a list of family_ids
family_ids_point_one <- c()
for(elem in split_0.1_GR_family){
new_value = elem$family[1]
family_ids_point_one <- c(family_ids_point_one, new_value)}
#step 7: merge all lists together.
family_0.1_statistics <- data.frame(family_ids_point_one, family_0.1_pvals, family_0.1_qvals)
##############THEN GENUS LEVEL
#step 1: import data and adjust factors
GR_by_genus_point_one <- read_csv("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Common_growth_medium_runs/EU_MM_post_modeling_analyses/02.11.21_EUstd_diet_TD0.1_collapsed_to_genus.csv")
GR_by_genus_point_one$Patient_Blind_ID <- as.factor(GR_by_genus_point_one$Patient_Blind_ID)
#Step 2: reorder and add columns for filtering and stats
colnames(GR_by_genus_point_one) #gotta do famgen first! don't need to reorder because it's already resorted
GR_by_genus_point_one_famgen <- GR_by_genus_point_one  %>% unite("famgen_col", family:genus, remove = FALSE)
colnames(GR_by_genus_point_one_famgen)
#now rearrange so famgen and patient_blind_ID are next to each other.
GR_by_genus_point_one_famgen <- GR_by_genus_point_one_famgen[, c(1,2,3,4,5,6,12,7,8,9,10,11,13,14,15)]
genus_point_one_paired <- GR_by_genus_point_one_famgen   %>% unite("sorting_col", famgen_col:Patient_Blind_ID, remove = FALSE)
genus_point_one_paired_only <- subset(genus_point_one_paired,duplicated(sorting_col) | duplicated(sorting_col, fromLast=TRUE))
#Step 3: split into multiple dataframes by genus and do stats on each genus
split_0.1_GR_genus <- split(genus_point_one_paired_only, with(genus_point_one_paired_only, interaction(famgen_col)), drop = TRUE)
genus_0.1_stats <- lapply(split_0.1_GR_genus, function(df){wilcox.test(mean_genus_GR~Description, data=df, exact= FALSE, paired= TRUE)})
#step 4: make lists of p values
genus_0.1_pvals <- c() #initialize list
for (elem in genus_0.1_stats){
new_value = elem$p.value
genus_0.1_pvals <- c(genus_0.1_pvals, new_value)}
rm(new_value)
#step 5: make a list of q-values
genus_0.1_qvals <- p.adjust(genus_0.1_pvals, method = "fdr")
#step 6: make a list of genus_ids
genus_ids_point_one <- c()
for(elem in split_0.1_GR_genus){
new_value = elem$famgen_col[1]
genus_ids_point_one <- c(genus_ids_point_one, new_value)}
#step 7: merge all lists together.
genus_0.1_statistics <- data.frame(genus_ids_point_one, genus_0.1_pvals, genus_0.1_qvals)
#step 8: now, remove all extra crap
rm(elem, family_0.1_stats, family_point_one_paired, family_point_one_paired_only, genus_0.1_stats, genus_point_one_paired, genus_point_one_paired_only,
GR_by_family_point_one, GR_by_genus_point_one_famgen, split_0.1_GR_family, split_0.1_GR_genus, family_0.1_pvals, family_0.1_qvals, family_ids_point_one,
genus_0.1_pvals, genus_0.1_qvals, genus_ids_point_one, new_value)
######################################################################
#excellent. Now, we want to only pull significant correlations.
family_0.1_statistics <- family_0.1_statistics[order(family_0.1_statistics$family_0.1_pvals),] #re-order by p-value
genus_0.1_statistics <- genus_0.1_statistics[order(genus_0.1_statistics$genus_0.1_pvals),] #re-order by p-value
top_ten_genera <- genus_0.1_statistics %>% top_n(-10, genus_0.1_pvals) #note the -10 here to select the smallest p-values
top_ten_genera2 <- genus_0.1_statistics %>% top_n(-10, genus_0.1_qvals) #go by q-values here: get a list of 14 b/c of ties for q-values
#now, we want to import growth rates and sample info ect. for these taxa
growth_rates_all <-read_csv("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Common_growth_medium_runs/EU_MM_post_modeling_analyses/02.09.21_EUstd_diet_TD0.1_tumor_v_normal_indiv_GRs.csv")
#goal: filter this dataframe by the top_ten_genera2 dataframe. In that, genus_ids_point_one has the identifier family_genus
#can I take family and genus columns from growth_rates_all and merge them into a new column?
growth_rates_all <- growth_rates_all %>%
mutate(family_genus = paste0(family, "_", genus)) #dplyr: use paste0 to create a new column, family_genus, from the values in the "family" column plus "_" plus
#the values in the genus column of the dataframe growth_rates_all
#and take a vector of the genus_ids_point_one from top_ten_genera2?
top_genera_names <- pull(top_ten_genera2,genus_ids_point_one) #make a vector from a column:thanks dplyr!
# and use that to filter on the new column?
growth_rates_top_genera <- filter(growth_rates_all, family_genus %in% top_genera_names) #thanks again dplyr!
View(growth_rates_top_genera)
View(top_ten_genera)
View(growth_rates_top_genera)
View(GR_by_genus_point_one)
View(growth_rates_top_genera)
growth_rates_top_genera$growth_rate_normal <- growth_rates_top_genera$growth_rate_normal + 1
growth_rates_top_genera$growth_rate_tumor <- growth_rates_top_genera$growth_rate_tumor + 1
growth_rates_top_genera$growth_rate_normal <- growth_rates_top_genera$log2(growth_rate_normal)
View(growth_rates_top_genera)
growth_rates_top_genera$log2_growth_rate_normal <- growth_rates_top_genera$log2(growth_rate_normal)
growth_rates_top_genera[,c(growth_rate_normal,growth_rate_tumor)] <- log2(growth_rates_top_genera[,c(growth_rate_normal,growth_rate_tumor)])
growth_rates_top_genera[,c("growth_rate_normal","growth_rate_tumor")] <- log2(growth_rates_top_genera[,c("growth_rate_normal","growth_rate_tumor")])
View(growth_rates_top_genera)
growth_rates_top_genera <- filter(growth_rates_all, family_genus %in% top_genera_names) #thanks again dplyr!
View(growth_rates_top_genera)
growth_rates_top_genera$growth_rate_normal <- growth_rates_top_genera$growth_rate_normal + 1
growth_rates_top_genera$growth_rate_tumor <- growth_rates_top_genera$growth_rate_tumor + 1
View(top_ten_genera)
View(growth_rates_top_genera)
growth_rates_top_genera[,c("log2_growth_rate_normal","log2_growth_rate_tumor")] <- log2(growth_rates_top_genera[,c("growth_rate_normal","growth_rate_tumor")])
View(growth_rates_top_genera)
growth_rates_top_genera$log2GRdiff <- (growth_rates_top_genera$log2_growth_rate_tumor - growth_rates_top_genera$log2_growth_rate_normal)
View(growth_rates_top_genera)
write.csv(as.data.frame(growth_rates_top_genera), file="04.13.21_most_differentially_growing_genera_log2_transformed.csv")
library(dada2)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dada2", version = "3.11")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dada2", version = "3.13")
library(dada2); packageVersion("dada2") #this prints the package version that you're using. I installed 3.13, so that should be it.
path <- "/Users/adamo010/Documents/Mayo_microbiome_project/"
head(list.files(path))
fnFs <- sort(list.files(path, pattern="_R1_001.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq.gz", full.names = TRUE))
fnFs[[1]]; fnRs[[1]]
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
library(stringr)
sample.names <- sapply(fnFs %>% str_replace("_R1_001.fastq.gz", ""))
sample.names <- sapply(substr(fnFs,1,nchar(fnFs)-16))
sample.names <- sapply(substr(basename(fnFs),1,nchar(fnFs)-16))
sample.names <- sapply(lapply(gsub('.{16}$', '', fnFs)))
sample.names <- sapply(strsplit(basename(fnFs), "_R1_001.fastq.gz"), `[`, 1)
sample.names
plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnFs[3:4])
plotQualityProfile(fnFs[5:6])
plotQualityProfile(fnFs[7:8])
plotQualityProfile(fnRs[1:2])
plotQualityProfile(fnRs[3:4])
plotQualityProfile(fnRs[5:6])
plotQualityProfile(fnRs[7:8])
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(285,200),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
out
plotQualityProfile(filtFs[1:2])
plotQualityProfile(filtFs[1:2])
plotQualityProfile(filtFs[3:4])
plotQualityProfile(filtFs[5:6])
plotQualityProfile(filtFs[5:6])
plotQualityProfile(filtFs[7:8])
plotQualityProfile(filtRs[1:2])
plotQualityProfile(filtRs[3:4])
plotQualityProfile(filtRs[5:6])
plotQualityProfile(filtRs[7:8])
library(dada2); packageVersion("dada2") #this prints the package version that you're using. Here, I get 1.20.0.
library(stringr) #for editing strings; a tidyverse creation
path <- "/Users/adamo010/Documents/Mayo_microbiome_project/"
head(list.files(path)) #print a few file names in the file path
fnFs <- sort(list.files(path, pattern="_R1_001_trimmed.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001_trimmed.fastq.gz", full.names = TRUE))
fnFs[[1]]; fnRs[[1]] #this prints off the first element in each list (b/c R isn't 0- indexed like my old friend python)
sample.names <- sapply(strsplit(basename(fnFs), "_R1_001_trimmed.fastq.gz"), `[`, 1) #this creates a list called sample_names based on fnFs, which has _R1_001.fastq.gz trimmed
plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnFs[1:8])
plotQualityProfile(fnRs[1:8])
filtered_out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, maxEE=c(2,2),
rm.phix=TRUE, minLen=175, truncLen=c(250,200))
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_trimmed_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_trimmed_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names
filtered_out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, maxEE=c(2,2),
rm.phix=TRUE, minLen=175, truncLen=c(250,200))
filtered_out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(250,200),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread= TRUE)
filtered_out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(250,200),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, matchIDs = TRUE)
filtered_out
plotQualityProfile(filtFs[1:8])
plotQualityProfile(filtRs[1:8])
plotQualityProfile(filtFs[1])
plotQualityProfile(filtFs[2])
plotQualityProfile(filtFs[7])
plotQualityProfile(filtFs[8])
plotQualityProfile(filtFs[1,2,7,8])
plotQualityProfile(filtFs[1:2])
plotQualityProfile(filtFs[7:8])
errF <- learnErrors(filtFs, multithread=TRUE)
filtFs
errF <- learnErrors(filtFs, multithread=TRUE, matchIDs = TRUE)
table(file.exists(filtFs))
type(filtFs)
class(fitlFs)
class(filtFs)
filtFs
class(sample.names)
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_trimmed_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_trimmed_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names
rm filtFs
rm(filtFs)
rm(filtRs)
sample.names2 <- sapply(strsplit(basename(fnFs), "_trimmed_filt.fastq.gz"), `[`, 1) #this creates a list called sample_names based on fnFs, which has _R1_001.fastq.gz trimmed
fnFs2 <- sort(list.files(path, pattern="_F_trimmed_filt.fastq.gz", full.names = TRUE))
fnFs2 <- sort(list.files(path, "filtered", pattern="_F_trimmed_filt.fastq.gz", full.names = TRUE))
fnFs2 <- sort(list.files(path, "filtered", pattern="_F_trimmed_filt.fastq.gz"))
fnFs.2 <- sort(list.files(path, "filtered", pattern="_F_trimmed_filt.fastq.gz", full.names = TRUE))
path2 <- "/Users/adamo010/Documents/Mayo_microbiome_project/filtered/"
fnFs2 <- sort(list.files(path2, "filtered", pattern="_F_trimmed_filt.fastq.gz", full.names = TRUE))
fnFs2 <- sort(list.files(path2, pattern="_F_trimmed_filt.fastq.gz", full.names = TRUE))
sample.names2 <- sapply(strsplit(basename(fnFs2), "_trimmed_filt.fastq.gz"), `[`, 1) #this creates a list called sample_names based on fnFs, which has _R1_001.fastq.gz trimmed
filtFs2 <- file.path(path, "filtered", paste0(sample.names, "_F_trimmed_filt.fastq.gz"))
filtRs2 <- file.path(path, "filtered", paste0(sample.names, "_R_trimmed_filt.fastq.gz"))
filtFs2 <- file.path(path, "filtered", paste0(sample.names2, "_F_trimmed_filt.fastq.gz"))
filtRs2 <- file.path(path, "filtered", paste0(sample.names2, "_R_trimmed_filt.fastq.gz"))
names(filtFs2) <- sample.names2
names(filtRs2) <- sample.names2
errF <- learnErrors(filtFs2, multithread=TRUE)
table(file.exists(filtFs)) #only four files exist
table(file.exists(filtFs2)) #only four files exist
errF <- learnErrors(filtFs2, multithread=TRUE)
filtFs2
path <- "/Users/adamo010/Documents/Mayo_microbiome_project/filtered/"
errF <- learnErrors(filtFs2, multithread=TRUE)
table(file.exists(filtFs2)) #only four files exist
#FUCK THIS NOISE I HATE R. I'm moving the files that failed into a separate folder so I can create a new filtFs/filtRs "character",
filtFs2
filtered_out2 <- filterAndTrim(fnFs2, filtFs2, fnRs2, filtRs2, truncLen=c(250,200),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, matchIDs = TRUE)
fnRs2 <- sort(list.files(path2, pattern="_R_trimmed_filt.fastq.gz", full.names = TRUE))
filtRs2 <- file.path(path, "filtered", paste0(sample.names2, "_R_trimmed_filt.fastq.gz"))
filtered_out2 <- filterAndTrim(fnFs2, filtFs2, fnRs2, filtRs2, truncLen=c(250,200),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, matchIDs = TRUE)
path <- "/Users/adamo010/Documents/Mayo_microbiome_project/"
filtered_out2 #this prints the number of reads that are filtered in and out.
errF <- learnErrors(filtFs2, multithread=TRUE)
errR <- learnErrors(filtRs2, multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
dadaFs <- dada(filtFs2, err=errF, pool= "pseudo", multithread=TRUE) #specify files (filtFs2), errors (errF), turn ON pooling to detect rare
dadaRs <- dada(filtRs2, err=errR, pool= "pseudo", multithread=TRUE)
dadaFs[[1]]
filtFs2
dadaFs[[1]]
dadaFs[[2]]
dadaFs[[3]]
dadaFs[[4]]
dadaRs[[1]]
dadaRs[[2]]
dadaRs[[3]]
dadaRs[[4]]
mergers <- mergePairs(dadaFs, filtFs2, dadaRs, filtRs2, verbose=TRUE)
head(mergers[[1]])
seqtab <- makeSequenceTable(mergers)
table(nchar(getSequences(seqtab)))
dim(seqtab)
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
sum(seqtab.nochim)/sum(seqtab)
getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))
track <- cbind(filtered_out2, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")
rownames(track) <- sample.names2
head(track)
taxa <- assignTaxonomy(seqtab.nochim, "~/tax/silva_nr99_v138.1_train_set.fa.gz", multithread=TRUE)
taxa <- assignTaxonomy(seqtab.nochim, "~/silva_nr99_v138.1_train_set.fa.gz", multithread=TRUE)
path <- "/Users/adamo010/Documents/Mayo_microbiome_project/"
taxa <- assignTaxonomy(seqtab.nochim, "~/silva_nr99_v138.1_train_set.fa.gz", multithread=TRUE)
taxa <- assignTaxonomy(seqtab.nochim, "silva_nr99_v138.1_train_set.fa.gz", multithread=TRUE)
taxa <- assignTaxonomy(seqtab.nochim, "~/tax/silva_nr99_v138.1_train_set.fa.gz", multithread=TRUE)
taxa <- assignTaxonomy(seqtab.nochim, "/Users/adamo010/Documents/Mayo_microbiome_project/silva_nr99_v138.1_train_set.fa.gz", multithread=TRUE)
taxa <- addSpecies(taxa, "/Users/adamo010/Documents/Mayo_microbiome_project/silva_species_assignment_v138.1.fa.gz")
taxa.print <- taxa # Removing sequence rownames for display only
rownames(taxa.print) <- NULL
head(taxa.print)
library(phyloseq)
source('http://bioconductor.org/biocLite.R')
biocLite('phyloseq')
source('http://bioconductor.org/biocLite.R')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
asv_seqs <- colnames(seqtab.nochim)
asv_headers <- vector(dim(seqtab.nochim)[2], mode="character")
View(seqtab.nochim)
for (i in 1:dim(seqtab.nochim)[2]) {asv_headers[i] <- paste(">ASV", i, sep="_")}
asv_fasta <- c(rbind(asv_headers, asv_seqs))
write(asv_fasta, "08.30.21_Mayo_microbiome_ASVs.fa")
asv_tab <- t(seqtab.nochim)
row.names(asv_tab) <- sub(">", "", asv_headers)
write.table(asv_tab, "08.30.21_Mayo_microbiome_ASVs_counts.tsv", sep="\t", quote=F, col.names=NA)
ranks <- c("domain", "phylum", "class", "order", "family", "genus", "species")
asv_tax <- t(sapply(tax_info, function(x) {
m <- match(ranks, x$rank)
taxa <- x$taxon[m]
taxa[startsWith(taxa, "unclassified_")] <- NA
taxa
}))
colnames(asv_tax) <- ranks
rownames(asv_tax) <- gsub(pattern=">", replacement="", x=asv_headers)
asv_tax <- t(sapply(tax_info, function(x) {
m <- match(ranks, x$rank)
taxa <- x$taxon[m]
taxa[startsWith(taxa, "unclassified_")] <- NA
taxa
}))
asv_tax <- t(sapply(taxa, function(x) {
m <- match(ranks, x$rank)
taxa <- x$taxon[m]
taxa[startsWith(taxa, "unclassified_")] <- NA
taxa
}))
write.table(asv_tab, "08.30.21_Mayo_microbiome_ASVs_counts.tsv", sep="\t", quote=F, col.names=NA)
write(asv_fasta, "/Users/adamo010/Documents/Mayo_microbiome_project/08.30.21_Mayo_microbiome_ASVs.fa")
write.table(asv_tab, "/Users/adamo010/Documents/Mayo_microbiome_project/08.30.21_Mayo_microbiome_ASVs_counts.tsv", sep="\t", quote=F, col.names=NA)
taxa
ranks <- c("domain", "phylum", "class", "order", "family", "genus", "species")
taxa
load("tax-info.RData")
download.file(url="http://www2.decipher.codes/Classification/TrainingSets/SILVA_SSU_r138_2019.RData", destfile="SILVA_SSU_r138_2019.RData")
load("SILVA_SSU_r138_2019.RData")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DECIPHER")
library(DECIPHER)
dna <- DNAStringSet(getSequences(seqtab.nochim)) # Create a DNAStringSet from the ASVs
ids <- IdTaxa(dna, trainingSet, strand="top", processors=NULL, verbose=FALSE) # use all processors
ranks <- c("domain", "phylum", "class", "order", "family", "genus", "species") # ranks of interest
taxid <- t(sapply(ids, function(x) {
m <- match(ranks, x$rank)
taxa <- x$taxon[m]
taxa[startsWith(taxa, "unclassified_")] <- NA
taxa
}))
colnames(taxid) <- ranks; rownames(taxid) <- getSequences(seqtab.nochim)
write.table(taxid, "ASVs_taxonomy.tsv", sep = "\t", quote=F, col.names=NA)
write.table(taxid, "/Users/adamo010/Documents/Mayo_microbiome_project/08.30.21_Mayo_microbiome_ASVs_taxonomy.tsv", sep = "\t", quote=F, col.names=NA)
row.names(taxid) <- sub(">", "", asv_headers)
View(taxid)
View(taxid)
write.table(taxid, "/Users/adamo010/Documents/Mayo_microbiome_project/08.30.21_Mayo_microbiome_ASVs_taxonomy.tsv", sep = "\t", quote=F, col.names=NA)
library(dada2); packageVersion("dada2") #this prints the package version that you're using. Here, I get 1.20.0.
library(stringr) #for editing strings; a tidyverse creation
path <- "/Users/adamo010/Documents/Mayo_microbiome_project/"
head(list.files(path)) #print a few file names in the file path
fnFs <- sort(list.files(path, pattern="_R1_001_trimmed.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001_trimmed.fastq.gz", full.names = TRUE))
sample.names <- sapply(strsplit(basename(fnFs), "_R1_001_trimmed.fastq.gz"), `[`, 1) #this creates a list called sample_names based on fnFs, which has _R1_001.fastq.gz trimmed
plotQualityProfile(fnFs[1:8])
path2 <- "/Users/adamo010/Documents/Mayo_microbiome_project/filtered/"
fnFs2 <- sort(list.files(path2, pattern="_F_trimmed_filt.fastq.gz", full.names = TRUE))
fnRs2 <- sort(list.files(path2, pattern="_R_trimmed_filt.fastq.gz", full.names = TRUE))
sample.names2 <- sapply(strsplit(basename(fnFs2), "_trimmed_filt.fastq.gz"), `[`, 1) #this creates a list called sample_names based on fnFs, which has _R1_001.fastq.gz trimmed
filtFs2 <- file.path(path, "filtered", paste0(sample.names2, "_F_trimmed_filt.fastq.gz"))
filtRs2 <- file.path(path, "filtered", paste0(sample.names2, "_R_trimmed_filt.fastq.gz"))
names(filtFs2) <- sample.names2
names(filtRs2) <- sample.names2
filtered_out2 <- filterAndTrim(fnFs2, filtFs2, fnRs2, filtRs2, truncLen=c(250,200),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, matchIDs = TRUE)
rm(filtFs2, filtRs2)
filtered_out2 <- filterAndTrim(fnFs2, filtFs2, fnRs2, filtRs2, truncLen=c(250,200),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, matchIDs = TRUE)
path2 <- "/Users/adamo010/Documents/Mayo_microbiome_project/filtered/"
fnFs2 <- sort(list.files(path2, pattern="_F_trimmed.fastq.gz", full.names = TRUE))
fnRs2 <- sort(list.files(path2, pattern="_R_trimmed.fastq.gz", full.names = TRUE))
sample.names2 <- sapply(strsplit(basename(fnFs2), "_trimmed_filt.fastq.gz"), `[`, 1) #this creates a list called sample_names based on fnFs, which has _R1_001.fastq.gz trimmed
filtFs2 <- file.path(path, "filtered", paste0(sample.names2, "_F_trimmed_filt.fastq.gz"))
filtRs2 <- file.path(path, "filtered", paste0(sample.names2, "_R_trimmed_filt.fastq.gz"))
names(filtFs2) <- sample.names2
names(filtRs2) <- sample.names2
filtered_out2 <- filterAndTrim(fnFs2, filtFs2, fnRs2, filtRs2, truncLen=c(250,200),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, matchIDs = TRUE)
filtered_out2 <- filterAndTrim(fnFs, filtFs2, fnRs, filtRs2, truncLen=c(250,200),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, matchIDs = TRUE)
filtered_out3 <- filterAndTrim(fnFs, filtFs2, fnRs, filtRs2, truncLen=c(250,200),
maxN=0, maxEE=c(2,5), truncQ=2, rm.phix=TRUE,
compress=TRUE, matchIDs = TRUE)
plotQualityProfile(filtFs2[1:2])
sample.names
rm(list = ls()) #clear out environment as needed.
setwd("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Common_growth_medium_runs/MICOM_flux_and_pathway_analyses")
library("ggplot2")
library("readxl")
library("dplyr")
library("tidyverse")
library("ggpubr")
library("ape")
library("lme4")
library("gplots")
library("plotly")
library("tidyr")
library("vegan")
library("psych")
library("openxlsx")
library("magrittr")
library("purrr")
library("reshape2")
setwd("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Common_growth_medium_runs/MICOM_flux_and_pathway_analyses")
setwd("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Common_growth_medium_runs/MICOM_flux_and_pathway_analyses/")
setwd("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Common_growth_medium_runs/MICOM_flux_and_pathway_analyses/")
library(tidyverse)
library(broom)
library(palmerpenguins)
install palmerpenguins
install.packages("palmerpenguins")
library(palmerpenguins)
penguins <- penguins %>%
drop_na() %>%
select(-year)
View(penguins)
pca_fit <- penguins %>%
select(where(is.numeric)) %>%
scale() %>%
prcomp()
summary(pca_fit)
pca_fit %>%
augment(penguins)
pca_fit %>%
augment(penguins) %>%
rename_at(vars(starts_with(".fitted")),
list(~str_replace(.,".fitted","")))
pca_fit %>%
augment(penguins) %>%
rename_at(vars(starts_with(".fitted")),
list(~str_replace(.,".fitted",""))) %>%
ggplot(aes(x=PC1,
y=PC2,
color=species,
shape=sex))+
geom_point()
library("ggplot2")
library("readxl")
library("dplyr")
library("tidyverse")
library("ggpubr")
library("ape")
library("lme4")
library("gplots")
library("plotly")
library("tidyr")
library("vegan")
library("data.table")
library("stringr")
rm(list = ls()) #clear out environment as needed.
setwd("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Analyzing_MICOM_communities_Hale2018/")
##########Step 1: import data and adjust factors
#It is important to note here that I have data (and have done analyses) for both family and genus level. However, I went with genus level
#moving forward because... most of the family level associations are basically due to a single genus anyway, I think is what I decided.
#NOTE: this is a temporary file; edit as needed
GR_by_genus_point_one <- read_csv("09.01.21_Hale2018_indiv_spp_GRs_collapsed_to_genus_diffs.csv")
GR_by_genus_point_one$host_subject_id <- as.factor(GR_by_genus_point_one$host_subject_id)
#colnames(GR_by_genus_point_one) #print column names as needed
GR_by_genus_point_one <- GR_by_genus_point_one  %>% unite("famgen_col", Family:Genus, remove = FALSE)
colnames(GR_by_genus_point_one) #check
#now rearrange so famgen and host_subject_id are next to each other.
GR_by_genus_point_one <- GR_by_genus_point_one[, c(1,2,3,4,5,6,19,7,8,9,10,11,12,13,14,15,16,17,18,20,21,22,23,24)] #this is edited from previous version, as my output is a bit different
#how many unique taxa are we including here? As of 09.22.21, 130 taxa
GR_by_genus_unique <- unique(GR_by_genus_point_one$famgen_col)
GR_by_genus_point_one_zerofree <- GR_by_genus_point_one[(GR_by_genus_point_one$mean_GR_difference !=0),]
#all right, by this point, we know that each row represents paired samples; by definition, each taxon must appear in at least two samples
#now, we need some way to count the number of samples where each famgen col appears.
#this is different than counting the number of occurances of each famgen value;
#uhh, scratch that, no it isn't, because we've collapsed the data already such that each row represents the mean GR of that taxon in that sample
#meaning if there were multiple instances of that taxon within a sample, it's already been averaged out.
#so, our method is sound. count the number of each occurance of famgen. Multiply that by 2. That is the number of SAMPLES (not patients)
#in which that taxon appears.
#how many unique taxa are we including here? As of 09.22.21, 130 taxa
GR_by_genus_zerofree_unique <- unique(GR_by_genus_point_one_zerofree$famgen_col)
View(GR_by_genus_point_one_zerofree)
View(GR_by_genus_point_one_zerofree)
colnames(GR_by_genus_point_one_zerofree) #check
