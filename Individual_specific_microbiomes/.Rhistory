ggplot(normal_fluxpaths_combined, aes(x=EX_thr_L, y=duri)) +
geom_point() +
geom_smooth(method=lm) +
labs(title = expression("Host deoxyiridine exchange flux vs microbiome L-Threonine exchange flux,"), subtitle= expression("Spearman correlation p.adj = 0.0787")) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size=12), plot.subtitle = element_text(hjust = 0.5, vjust =1, size=12)) +
guides(fill="none") +
scale_x_continuous(name ="Microbiome L-Threonine exchange flux, mmmol/(gDW * h)") +
scale_y_continuous(name = "Host deoxyuridine exchange flux, mmmol/(gDW * h)")
ggplot(normal_fluxpaths_combined, aes(x=EX_thr_L, y=duri)) +
geom_point() +
geom_smooth(method=lm) +
labs(title = expression("Host deoxyiridine exchange flux vs\n microbiome L-Threonine exchange flux,")) +
text(-4000,800, expression("Spearman correlation p.adj = 0.0787")) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size=12), plot.subtitle = element_text(hjust = 0.5, vjust =1, size=12)) +
guides(fill="none") +
scale_x_continuous(name ="Microbiome L-Threonine exchange flux, mmmol/(gDW * h)") +
scale_y_continuous(name = "Host deoxyuridine exchange flux, mmmol/(gDW * h)")
ggplot(normal_fluxpaths_combined, aes(x=EX_thr_L, y=duri)) +
geom_point() +
geom_smooth(method=lm) +
labs(title = expression("Host deoxyiridine exchange flux vs\n microbiome L-Threonine exchange flux,")) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size=12), plot.subtitle = element_text(hjust = 0.5, vjust =1, size=12)) +
guides(fill="none") +
scale_x_continuous(name ="Microbiome L-Threonine exchange flux, mmmol/(gDW * h)") +
scale_y_continuous(name = "Host deoxyuridine exchange flux, mmmol/(gDW * h)") +
text(-4000,800, expression("Spearman correlation p.adj = 0.0787"))
ggplot(normal_fluxpaths_combined, aes(x=EX_thr_L, y=duri)) +
geom_point() +
geom_smooth(method=lm) +
labs(title = expression("Host deoxyiridine exchange flux vs\n microbiome L-Threonine exchange flux,")) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size=12), plot.subtitle = element_text(hjust = 0.5, vjust =1, size=12)) +
guides(fill="none") +
scale_x_continuous(name ="Microbiome L-Threonine exchange flux, mmmol/(gDW * h)") +
scale_y_continuous(name = "Host deoxyuridine exchange flux, mmmol/(gDW * h)") +
text(-4000, 800, expression("Spearman correlation p.adj = 0.0787"))
ggplot(normal_fluxpaths_combined, aes(x=EX_thr_L, y=duri)) +
geom_point() +
geom_smooth(method=lm) +
labs(title = expression("Host deoxyiridine exchange flux vs\n microbiome L-Threonine exchange flux,")) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size=12)) +
guides(fill="none") +
scale_x_continuous(name ="Microbiome L-Threonine exchange flux, mmmol/(gDW * h)") +
scale_y_continuous(name = "Host deoxyuridine exchange flux, mmmol/(gDW * h)") +
text(-4000, 800, expression("Spearman correlation p.adj = 0.0787"))
ggplot(normal_fluxpaths_combined, aes(x=EX_thr_L, y=duri)) +
geom_point() +
geom_smooth(method=lm) +
labs(title = expression("Host deoxyiridine exchange flux vs\n microbiome L-Threonine exchange flux,")) +
theme(plot.title = element_text(hjust=0.5, vjust=2)) +
guides(fill="none") +
scale_x_continuous(name ="Microbiome L-Threonine exchange flux, mmmol/(gDW * h)") +
scale_y_continuous(name = "Host deoxyuridine exchange flux, mmmol/(gDW * h)") +
text(-4000, 800, expression("Spearman correlation p.adj = 0.0787"))
ggplot(fluxpaths_and_ges_combined, aes(x=EX_pro_L, y=CYP19A1)) +
geom_point() +
geom_smooth(method=lm) +
labs(title = expression("Cytochrome P450 Family 19 Subfamily A Member 1 expression vs. L-proline exchange flux,"), subtitle= expression("Spearman correlation p.adj = 0.0583")) +
#theme(plot.title = element_text(hjust=0.5, vjust=2, size=12), plot.subtitle = element_text(hjust = 0.5, vjust =1, size=12)) +
guides(fill="none") +
scale_x_continuous(name ="log2(fold change flux), mmmol/(gDW * h),\n L-proline exchange") +
scale_y_continuous(name = "Cytochrome P450 Family 19 Subfamily A Member 1,\nlog2(fold change gene expression)")
ggplot(normal_fluxpaths_combined, aes(x=EX_thr_L, y=duri)) +
geom_point() +
geom_smooth(method=lm) +
labs(title = expression("Host deoxyiridine exchange flux vs\n microbiome L-Threonine exchange flux,")) +
#theme(plot.title = element_text(hjust=0.5, vjust=2, size=12)) +
guides(fill="none") +
scale_x_continuous(name ="Microbiome L-Threonine exchange flux, mmmol/(gDW * h)") +
scale_y_continuous(name = "Host deoxyuridine exchange flux, mmmol/(gDW * h)") +
text(-4000, 800, expression("Spearman correlation p.adj = 0.0787"))
ggplot(normal_fluxpaths_combined, aes(x=EX_thr_L, y=duri)) +
geom_point() +
geom_smooth(method=lm) +
labs(title = expression("Host deoxyiridine exchange flux vs\n microbiome L-Threonine exchange flux,")) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size=12), plot.margin=unit(c(1,1,1,1),"mm")) +
guides(fill="none") +
scale_x_continuous(name ="Microbiome L-Threonine exchange flux, mmmol/(gDW * h)") +
scale_y_continuous(name = "Host deoxyuridine exchange flux, mmmol/(gDW * h)") +
text(-4000, 800, expression("Spearman correlation p.adj = 0.0787"))
ggplot(normal_fluxpaths_combined, aes(x=EX_thr_L, y=duri)) +
geom_point() +
geom_smooth(method=lm) +
labs(title = expression("Host deoxyiridine exchange flux vs\n microbiome L-Threonine exchange flux,")) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size=12), plot.margin=unit(c(5,1,1,1),"mm")) +
guides(fill="none") +
scale_x_continuous(name ="Microbiome L-Threonine exchange flux, mmmol/(gDW * h)") +
scale_y_continuous(name = "Host deoxyuridine exchange flux, mmmol/(gDW * h)") +
text(-4000, 800, expression("Spearman correlation p.adj = 0.0787"))
ggplot(normal_fluxpaths_combined, aes(x=EX_thr_L, y=duri)) +
geom_point() +
geom_smooth(method=lm) +
labs(title = expression("Host deoxyiridine exchange flux vs\n microbiome L-Threonine exchange flux,")) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size=12), plot.margin=unit(c(7,1,1,1),"mm")) +
guides(fill="none") +
scale_x_continuous(name ="Microbiome L-Threonine exchange flux, mmmol/(gDW * h)") +
scale_y_continuous(name = "Host deoxyuridine exchange flux, mmmol/(gDW * h)") +
text(-4000, 800, expression("Spearman correlation p.adj = 0.0787"))
View(normal_correlations_long_merged_sigonly)
View(tumor_correlations_long_merged_sigonly)
ggplot(tumor_fluxpaths_combined, aes(x=EX_lac_D, y=	leuktrC4)) +
geom_point() +
geom_smooth(method=lm) +
labs(title = expression("Host Leukotriene C4 exchange flux vs\n microbiome D-lactate exchange flux,")) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size=12), plot.margin=unit(c(7,1,1,1),"mm")) +
guides(fill="none") +
scale_x_continuous(name ="Microbiome D-lactate exchange flux, mmmol/(gDW * h)") +
scale_y_continuous(name = "Host Leukotriene C4 exchange flux, mmmol/(gDW * h)") +
text(-4000, 800, expression("Spearman correlation p.adj = 0.0787"))
ggplot(tumor_fluxpaths_combined, aes(x=EX_lac_D, y=	leuktrC4)) +
geom_point() +
geom_smooth(method=lm) +
labs(title = expression("Host Leukotriene C4 exchange flux vs\n microbiome D-lactate exchange flux,")) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size=12), plot.margin=unit(c(7,1,1,1),"mm")) +
guides(fill="none") +
scale_x_continuous(name ="Microbiome D-lactate exchange flux, mmmol/(gDW * h)") +
scale_y_continuous(name = "Host Leukotriene C4 exchange flux, mmmol/(gDW * h)") +
text(3000, 700, expression("Spearman correlation p.adj = 0.0787"))
ggplot(tumor_fluxpaths_combined, aes(x=EX_lac_D, y=	leuktrC4)) +
geom_point() +
geom_smooth(method=lm) +
labs(title = expression("Host Leukotriene C4 exchange flux vs\n microbiome D-lactate exchange flux,")) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size=12), plot.margin=unit(c(7,1,1,1),"mm")) +
guides(fill="none") +
scale_x_continuous(name ="Microbiome D-lactate exchange flux, mmmol/(gDW * h)") +
scale_y_continuous(name = "Host Leukotriene C4 exchange flux, mmmol/(gDW * h)") +
text(700,3000, expression("Spearman correlation p.adj = 0.0787"))
ggplot(normal_fluxpaths_combined, aes(x=EX_thr_L, y=duri)) +
geom_point() +
geom_smooth(method=lm) +
labs(title = expression("Host deoxyiridine exchange flux vs.\n microbiome L-Threonine exchange flux,")) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size=12), plot.margin=unit(c(7,1,1,1),"mm")) +
guides(fill="none") +
scale_x_continuous(name ="Microbiome L-Threonine exchange flux, mmmol/(gDW * h)") +
scale_y_continuous(name = "Host deoxyuridine exchange flux, mmmol/(gDW * h)") +
annotate(geom="text", x=-4000, y=800, label="Spearman correlation p.adj = 0.0787",color="black")
ggplot(normal_fluxpaths_combined, aes(x=EX_thr_L, y=duri)) +
geom_point() +
geom_smooth(method=lm) +
labs(title = expression("Host deoxyiridine exchange flux vs.\n microbiome L-Threonine exchange flux,")) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size=12), plot.margin=unit(c(7,1,1,1),"mm")) +
guides(fill="none") +
scale_x_continuous(name ="Microbiome L-Threonine exchange flux, mmmol/(gDW * h)") +
scale_y_continuous(name = "Host deoxyuridine exchange flux, mmmol/(gDW * h)") +
annotate(geom="text", x=-4000, y=800, label="Spearman correlation\np.adj = 0.0787",color="black")
ggplot(normal_fluxpaths_combined, aes(x=EX_thr_L, y=duri)) +
geom_point() +
geom_smooth(method=lm) +
labs(title = expression("Host deoxyiridine exchange flux vs.\n microbiome L-Threonine exchange flux, normal samples")) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size=12), plot.margin=unit(c(7,1,1,1),"mm")) +
guides(fill="none") +
scale_x_continuous(name ="Microbiome L-Threonine exchange flux, mmmol/(gDW * h)") +
scale_y_continuous(name = "Host deoxyuridine exchange flux, mmmol/(gDW * h)") +
annotate(geom="text", x=-4000, y=800, label="Spearman correlation\np.adj = 0.0787",color="black")
ggplot(normal_fluxpaths_combined, aes(x=EX_thr_L, y=duri)) +
geom_point() +
geom_smooth(method=lm) +
labs(title = expression("Host deoxyiridine exchange flux vs. microbiome\nL-Threonine exchange flux, normal samples")) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size=12), plot.margin=unit(c(7,1,1,1),"mm")) +
guides(fill="none") +
scale_x_continuous(name ="Microbiome L-Threonine exchange flux, mmmol/(gDW * h)") +
scale_y_continuous(name = "Host deoxyuridine exchange flux, mmmol/(gDW * h)") +
annotate(geom="text", x=-4000, y=800, label="Spearman correlation\np.adj = 0.0787",color="black")
ggplot(tumor_fluxpaths_combined, aes(x=EX_lac_D, y=	leuktrC4)) +
geom_point() +
geom_smooth(method=lm) +
labs(title = expression("Host Leukotriene C4 exchange flux vs. microbiome\nD-lactate exchange flux, tumor samples")) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size=12), plot.margin=unit(c(7,1,1,1),"mm")) +
guides(fill="none") +
scale_x_continuous(name ="Microbiome D-lactate exchange flux, mmmol/(gDW * h)") +
scale_y_continuous(name = "Host Leukotriene C4 exchange flux, mmmol/(gDW * h)")
ggplot(tumor_fluxpaths_combined, aes(x=EX_lac_D, y=	leuktrC4)) +
geom_point() +
geom_smooth(method=lm) +
labs(title = expression("Host Leukotriene C4 exchange flux vs. microbiome\nD-lactate exchange flux, tumor samples")) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size=12), plot.margin=unit(c(7,1,1,1),"mm")) +
guides(fill="none") +
scale_x_continuous(name ="Microbiome D-lactate exchange flux, mmmol/(gDW * h)") +
scale_y_continuous(name = "Host Leukotriene C4 exchange flux, mmmol/(gDW * h)") +
annotate(geom="text", x=2500, y=800, label="Spearman correlation\np.raw = 0.00780",color="black")
ggplot(tumor_fluxpaths_combined, aes(x=EX_lac_D, y=	leuktrE4)) +
geom_point() +
geom_smooth(method=lm) +
labs(title = expression("Host Leukotriene E4 exchange flux vs. microbiome\nD-lactate exchange flux, tumor samples")) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size=12), plot.margin=unit(c(7,1,1,1),"mm")) +
guides(fill="none") +
scale_x_continuous(name ="Microbiome D-lactate exchange flux, mmmol/(gDW * h)") +
scale_y_continuous(name = "Host Leukotriene E4 exchange flux, mmmol/(gDW * h)") +
annotate(geom="text", x=2500, y=800, label="Spearman correlation\np.raw = 0.00780",color="black")
ggplot(tumor_fluxpaths_combined, aes(x=EX_lac_D, y=	leuktrE4)) +
geom_point() +
geom_smooth(method=lm) +
labs(title = expression("Host Leukotriene E4 exchange flux vs. microbiome\nD-lactate exchange flux, tumor samples")) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size=12), plot.margin=unit(c(7,1,1,1),"mm")) +
guides(fill="none") +
scale_x_continuous(name ="Microbiome D-lactate exchange flux, mmmol/(gDW * h)") +
scale_y_continuous(name = "Host Leukotriene E4 exchange flux, mmmol/(gDW * h)") +
annotate(geom="text", x=2500, y=500, label="Spearman correlation\np.raw = 0.00780",color="black")
ggplot(tumor_fluxpaths_combined, aes(x=EX_lac_D, y=	leuktrE4)) +
geom_point() +
geom_smooth(method=lm) +
labs(title = expression("Host Leukotriene E4 exchange flux vs. microbiome\nD-lactate exchange flux, tumor samples")) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size=12), plot.margin=unit(c(7,1,1,1),"mm")) +
guides(fill="none") +
scale_x_continuous(name ="Microbiome D-lactate exchange flux, mmmol/(gDW * h)") +
scale_y_continuous(name = "Host Leukotriene E4 exchange flux, mmmol/(gDW * h)")
ggplot(tumor_fluxpaths_combined, aes(x=EX_lac_D, y=	leuktrE4)) +
geom_point() +
geom_smooth(method=lm) +
labs(title = expression("Host Leukotriene E4 exchange flux vs. microbiome\nD-lactate exchange flux, tumor samples")) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size=12), plot.margin=unit(c(7,1,1,1),"mm")) +
guides(fill="none") +
scale_x_continuous(name ="Microbiome D-lactate exchange flux, mmmol/(gDW * h)") +
scale_y_continuous(name = "Host Leukotriene E4 exchange flux, mmmol/(gDW * h)") +
annotate(geom="text", x=2000, y=-750, label="Spearman correlation\np.raw = 0.00780",color="black")
rm(list = ls()) #clear out environment as needed.
setwd("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Analyzing_MICOM_communities_Muehlbauer2021/")
##########Step 1: import data and adjust factors
analyzed_fluxpaths <- read_csv("11.09.21_Muehlbauer2021_fluxes_with_metadata_longform.csv")
View(analyzed_fluxpaths)
View(analyzed_fluxpaths)
View(analyzed_fluxpaths)
analyzed_fluxpaths$Experimental_treatment <- as.factor(analyzed_fluxpaths$Experimental_treatment)
analyzed_fluxpaths <- read_csv("11.09.21_Muehlbauer2021_fluxes_with_metadata_longform.csv")
analyzed_fluxpaths$Library_name <- as.factor(analyzed_fluxpaths$Library_name)
analyzed_fluxpaths$experimental_treatment <- as.factor(analyzed_fluxpaths$experimental_treatment)
View(analyzed_fluxpaths)
analyzed_fluxpaths <- subset(analyzed_fluxpaths, select = -c(...1, fluxpath_formula, fluxpath_subsystem))
analyzed_fluxpaths <- subset(analyzed_fluxpaths, select = -c(...1, fluxpath_formula, fluxpath_subsystem, Isolate))
analyzed_fluxpaths <- read_csv("11.09.21_Muehlbauer2021_fluxes_with_metadata_longform.csv")
analyzed_fluxpaths$Library_name <- as.factor(analyzed_fluxpaths$Library_name)
analyzed_fluxpaths$experimental_treatment <- as.factor(analyzed_fluxpaths$experimental_treatment)
#colnames(analyzed_metabolites) #print column names as needed
analyzed_fluxpaths <- subset(analyzed_fluxpaths, select = -c(...1, fluxpath_formula, fluxpath_subsystem, Isolate))
fluxpaths_unique <- unique(analyzed_fluxpaths$fluxpath_name)
sum_analyzed_fluxpaths_subset <- subset(analyzed_fluxpaths, select = -c(OTU_ID))
sum_analyzed_fluxpaths_subset <- sum_analyzed_fluxpaths_subset %>%
mutate(sorting_col = paste0(Sample_ID, "_", fluxpath_name))
sum_analyzed_fluxpaths_subset_noNANs <- sum_analyzed_fluxpaths_subset[!is.na(sum_analyzed_fluxpaths_subset$flux_value),]
sum_analyzed_fluxpaths_subset_collapsed <- sum_analyzed_fluxpaths_subset_noNANs %>%        # Specify data frame
group_by(sorting_col, Sample_ID, Experimental_treatment, Library_name, fluxpath_name) %>%    # Specify group indicator (columns to keep)
summarise_at(vars(flux_value),                   # Specify column
list(sum_fluxpath_amount = sum)) %>% # Specify function
ungroup() #do this so select (dropping columns) can happen later
sum_analyzed_fluxpaths_subset_collapsed <- sum_analyzed_fluxpaths_subset_noNANs %>%        # Specify data frame
group_by(sorting_col, Sample_ID, experimental_treatment, Library_name, fluxpath_name) %>%    # Specify group indicator (columns to keep)
summarise_at(vars(flux_value),                   # Specify column
list(sum_fluxpath_amount = sum)) %>% # Specify function
ungroup() #do this so select (dropping columns) can happen later
#nice. End up with a dataframe where each row is a unique subsystem/sample average of fluxes from pathways within that subsystem
sum_fluxpaths_unique <- unique(sum_analyzed_fluxpaths_subset_collapsed$fluxpath_name)
rm(list = ls()) #clear out environment as needed.
setwd("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Analyzing_MICOM_communities_Muehlbauer2021/")
analyzed_fluxpaths <- read_csv("11.09.21_Muehlbauer2021_fluxes_with_metadata_longform.csv")
analyzed_fluxpaths$Library_name <- as.factor(analyzed_fluxpaths$Library_name)
analyzed_fluxpaths$experimental_treatment <- as.factor(analyzed_fluxpaths$experimental_treatment)
#colnames(analyzed_metabolites) #print column names as needed
analyzed_fluxpaths <- subset(analyzed_fluxpaths, select = -c(...1, fluxpath_formula, fluxpath_subsystem, Isolate))
#how many unique fluxes are we including here? 160
fluxpaths_unique <- unique(analyzed_fluxpaths$fluxpath_name)
av_analyzed_fluxpaths_subset <- subset(analyzed_fluxpaths, select = -c(OTU_ID))
av_analyzed_fluxpaths_subset <- av_analyzed_fluxpaths_subset %>%
mutate(sorting_col = paste0(Sample_ID, "_", fluxpath_name))
av_analyzed_fluxpaths_subset_noNANs <- av_analyzed_fluxpaths_subset[!is.na(av_analyzed_fluxpaths_subset$flux_value),]
av_analyzed_fluxpaths_subset_collapsed <- av_analyzed_fluxpaths_subset_noNANs %>%        # Specify data frame
group_by(sorting_col, Sample_ID, experimental_treatment, Patient_Blind_ID, fluxpath_name) %>%    # Specify group indicator (columns to keep)
summarise_at(vars(flux_value),                   # Specify column
list(av_fluxpath_amount = mean)) %>% # Specify function
ungroup() #do this so select (dropping columns) can happen later
av_analyzed_fluxpaths_subset_collapsed <- av_analyzed_fluxpaths_subset_noNANs %>%        # Specify data frame
group_by(sorting_col, Sample_ID, experimental_treatment, Library_name, fluxpath_name) %>%    # Specify group indicator (columns to keep)
summarise_at(vars(flux_value),                   # Specify column
list(av_fluxpath_amount = mean)) %>% # Specify function
ungroup() #do this so select (dropping columns) can happen later
av_fluxpaths_unique <- unique(av_analyzed_fluxpaths_subset_collapsed$fluxpath_name)
rm(list = ls()) #clear out environment as needed.
setwd("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Analyzing_MICOM_communities_Muehlbauer2021/")
##########Step 1: import data and adjust factors
analyzed_fluxpaths <- read_csv("11.09.21_Muehlbauer2021_fluxes_with_metadata_longform.csv")
analyzed_fluxpaths$Library_name <- as.factor(analyzed_fluxpaths$Library_name)
analyzed_fluxpaths$experimental_treatment <- as.factor(analyzed_fluxpaths$experimental_treatment)
#colnames(analyzed_metabolites) #print column names as needed
analyzed_fluxpaths <- subset(analyzed_fluxpaths, select = -c(...1, fluxpath_formula, fluxpath_subsystem, Isolate))
#how many unique fluxes are we including here? 160
fluxpaths_unique <- unique(analyzed_fluxpaths$fluxpath_name)
#########NEW Step 2c: collapse this dataset by subsystem across OTU_ids; here, SUM across OTUs within a fluxpath within a sample.
#drop unnecessary columns (i.e. what we're averating across)
sum_analyzed_fluxpaths_subset <- subset(analyzed_fluxpaths, select = -c(OTU_ID))
#create a new sorting column to get unique values for each Sample_ID/Fluxpath_subsystem combo
sum_analyzed_fluxpaths_subset <- sum_analyzed_fluxpaths_subset %>%
mutate(sorting_col = paste0(Sample_ID, "_", fluxpath_name))
#Drop NAN values; converting to zeroes screws with averages
sum_analyzed_fluxpaths_subset_noNANs <- sum_analyzed_fluxpaths_subset[!is.na(sum_analyzed_fluxpaths_subset$flux_value),]
#NEW 09.29.21: take median instead of mean, to control for wild -ve values in some paths.
#then average across sorting col:
sum_analyzed_fluxpaths_subset_collapsed <- sum_analyzed_fluxpaths_subset_noNANs %>%        # Specify data frame
group_by(sorting_col, Sample_ID, experimental_treatment, Library_name, fluxpath_name) %>%    # Specify group indicator (columns to keep)
summarise_at(vars(flux_value),                   # Specify column
list(sum_fluxpath_amount = sum)) %>% # Specify function
ungroup() #do this so select (dropping columns) can happen later
#nice. End up with a dataframe where each row is a unique subsystem/sample average of fluxes from pathways within that subsystem
#how many unique fluxes are we including here? Still 160
sum_fluxpaths_unique <- unique(sum_analyzed_fluxpaths_subset_collapsed$fluxpath_name)
#######clean up
rm(sum_analyzed_fluxpaths_subset, sum_analyzed_fluxpaths_subset_noNANs)
sum_analyzed_fluxpaths_wide <- select(sum_analyzed_fluxpaths_subset_collapsed, -c(sorting_col, Sample_ID)) #drop unnecessary columns
#first, convert to wide form
sum_analyzed_fluxpaths_wide <- sum_analyzed_fluxpaths_wide %>%
spread(Experimental_treatment, sum_fluxpath_amount)
sum_analyzed_fluxpaths_wide <- select(sum_analyzed_fluxpaths_subset_collapsed, -c(sorting_col, Sample_ID)) #drop unnecessary columns
#first, convert to wide form
sum_analyzed_fluxpaths_wide <- sum_analyzed_fluxpaths_wide %>%
spread(experimental_treatment, sum_fluxpath_amount)
sum_analyzed_fluxpaths_wide_noNANs <- sum_analyzed_fluxpaths_wide[!(is.na(sum_analyzed_fluxpaths_wide$tumor) & is.na(sum_analyzed_fluxpaths_wide$normal)),]
sum_fluxpaths_unique_zerofree <- unique(sum_analyzed_fluxpaths_wide_noNANs$fluxpath_name) #count the number of metabolites
View(sum_analyzed_fluxpaths_wide)
rm(list = ls()) #clear out environment as needed.
setwd("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Analyzing_MICOM_communities_Muehlbauer2021/")
##########Step 1: import data and adjust factors
analyzed_fluxpaths <- read_csv("11.09.21_Muehlbauer2021_fluxes_with_metadata_longform.csv")
analyzed_fluxpaths$Library_name <- as.factor(analyzed_fluxpaths$Library_name)
analyzed_fluxpaths$experimental_treatment <- as.factor(analyzed_fluxpaths$experimental_treatment)
#colnames(analyzed_metabolites) #print column names as needed
analyzed_fluxpaths <- subset(analyzed_fluxpaths, select = -c(...1, fluxpath_formula, fluxpath_subsystem, Isolate))
View(analyzed_fluxpaths)
rm(list = ls()) #clear out environment as needed.
setwd("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Analyzing_MICOM_communities_Muehlbauer2021/")
##########Step 1: import data and adjust factors
analyzed_fluxpaths <- read_csv("11.09.21_Muehlbauer2021_fluxes_with_metadata_longform.csv")
analyzed_fluxpaths$Library_name <- as.factor(analyzed_fluxpaths$Library_name)
analyzed_fluxpaths$experimental_treatment <- as.factor(analyzed_fluxpaths$experimental_treatment)
View(analyzed_fluxpaths)
analyzed_fluxpaths <- read_csv("11.09.21_Muehlbauer2021_fluxes_with_metadata_longform.csv")
analyzed_fluxpaths$Library_name <- as.factor(analyzed_fluxpaths$Isolate)
analyzed_fluxpaths$experimental_treatment <- as.factor(analyzed_fluxpaths$experimental_treatment)
#colnames(analyzed_metabolites) #print column names as needed
analyzed_fluxpaths <- subset(analyzed_fluxpaths, select = -c(...1, fluxpath_formula, fluxpath_subsystem, Library_name))
fluxpaths_unique <- unique(analyzed_fluxpaths$fluxpath_name)
sum_analyzed_fluxpaths_subset <- subset(analyzed_fluxpaths, select = -c(OTU_ID))
sum_analyzed_fluxpaths_subset <- sum_analyzed_fluxpaths_subset %>%
mutate(sorting_col = paste0(Sample_ID, "_", fluxpath_name))
sum_analyzed_fluxpaths_subset_noNANs <- sum_analyzed_fluxpaths_subset[!is.na(sum_analyzed_fluxpaths_subset$flux_value),]
View(sum_analyzed_fluxpaths_subset_noNANs)
sum_analyzed_fluxpaths_subset_collapsed <- sum_analyzed_fluxpaths_subset_noNANs %>%        # Specify data frame
group_by(sorting_col, Sample_ID, experimental_treatment, Isolate, fluxpath_name) %>%    # Specify group indicator (columns to keep)
summarise_at(vars(flux_value),                   # Specify column
list(sum_fluxpath_amount = sum)) %>% # Specify function
ungroup() #do this so select (dropping columns) can happen later
sum_fluxpaths_unique <- unique(sum_analyzed_fluxpaths_subset_collapsed$fluxpath_name)
rm(sum_analyzed_fluxpaths_subset, sum_analyzed_fluxpaths_subset_noNANs)
sum_analyzed_fluxpaths_wide <- select(sum_analyzed_fluxpaths_subset_collapsed, -c(sorting_col, Sample_ID)) #drop unnecessary columns
sum_analyzed_fluxpaths_wide <- sum_analyzed_fluxpaths_wide %>%
spread(experimental_treatment, sum_fluxpath_amount)
View(sum_analyzed_fluxpaths_wide)
View(sum_analyzed_fluxpaths_wide)
sum_analyzed_fluxpaths_wide_noNANs <- sum_analyzed_fluxpaths_wide[!(is.na(sum_analyzed_fluxpaths_wide$Colonocytes) & is.na(sum_analyzed_fluxpaths_wide$Only)
& is.na(sum_analyzed_fluxpaths_wide$Uncultured)),]
sum_fluxpaths_unique_zerofree <- unique(sum_analyzed_fluxpaths_wide_noNANs$fluxpath_name) #count the number of metabolites
sum_analyzed_fluxpaths_wide_noNANs$Colonocytes[is.na(sum_analyzed_fluxpaths_wide_noNANs$Colonocytes)] = 0
sum_analyzed_fluxpaths_wide_noNANs$Only[is.na(sum_analyzed_fluxpaths_wide_noNANs$Only)] = 0
sum_analyzed_fluxpaths_wide_noNANs$Uncultured[is.na(sum_analyzed_fluxpaths_wide_noNANs$Uncultured)] = 0
View(sum_analyzed_fluxpaths_wide_noNANs)
sum_fluxpaths_zerofree_unique <- unique(sum_analyzed_fluxpaths_wide_noNANs$fluxpath_name)
sum_analyzed_fluxpaths_filtering_df <- sum_analyzed_fluxpaths_wide_noNANs %>%  #create a new dataframe by filtering the old one
mutate(count_of_nonzeros = rowSums(.[3:5]!=0)) %>% #create a new column, count_of_nonzeroes, that counts # nonzero values in tumor and normal columns
group_by(fluxpath_name) %>% #group by the column of interest
summarize(n = sum(count_of_nonzeros)) %>% #sums the count_of_nonzeros values within each fluxpath_subsystem and saves the value as n
mutate(n) #add n as a new column in the dataframe
View(sum_analyzed_fluxpaths_filtering_df)
sum_analyzed_fluxpaths_filter_added <- dplyr::inner_join(sum_analyzed_fluxpaths_wide_noNANs_zerofree, sum_analyzed_fluxpaths_filtering_df, by= "fluxpath_name")
sum_analyzed_fluxpaths_filter_added <- dplyr::inner_join(sum_analyzed_fluxpaths_wide_noNANs, sum_analyzed_fluxpaths_filtering_df, by= "fluxpath_name")
sum_analyzed_fluxpaths_filtered <- filter(sum_analyzed_fluxpaths_filter_added, n >= 12)
sum_fluxpaths_filtered_unique <- unique(sum_analyzed_fluxpaths_filtered$fluxpath_name)
sum_analyzed_fluxpaths_paired_only <- select(sum_analyzed_fluxpaths_filtered, -cn))
sum_analyzed_fluxpaths_paired_only <- select(sum_analyzed_fluxpaths_filtered, -c(n))
sum_analyzed_fluxpaths_paired_long <- reshape2::melt(data= sum_analyzed_fluxpaths_paired_only,
id.vars= c("Library_name", "fluxpath_name"),
variable.name = "experimental_treatment",
value.name = "fluxpath_activity")
#split up by different subsystems and see where we get.
View(sum_analyzed_fluxpaths_paired_only)
sum_analyzed_fluxpaths_paired_long <- reshape2::melt(data= sum_analyzed_fluxpaths_paired_only,
id.vars= c("Isolate", "fluxpath_name"),
variable.name = "experimental_treatment",
value.name = "fluxpath_activity")
#split up by different subsystems and see where we get.
sum_split_analyzed_fluxpaths_by_flux <- split(sum_analyzed_fluxpaths_paired_long,
with(sum_analyzed_fluxpaths_paired_long, interaction(fluxpath_name)), drop = TRUE)
sum_by_flux_stats <- lapply(sum_split_analyzed_fluxpaths_by_flux, function(df){wilcox.test(fluxpath_activity~experimental_treatment, data=df, exact= FALSE, paired= TRUE)})
View(sum_analyzed_fluxpaths_paired_long)
View(sum_analyzed_fluxpaths_paired_only)
write.csv(as.data.frame(sum_analyzed_fluxpaths_paried_only), file="11.09.21_filtered_sum_exchange_fluxes_only_alldata_Muehlbauer2020_data.csv")
write.csv(as.data.frame(sum_analyzed_fluxpaths_paired_only), file="11.09.21_filtered_sum_exchange_fluxes_only_alldata_Muehlbauer2020_data.csv")
write.csv(as.data.frame(sum_analyzed_fluxpaths_paired_only), file="12.28.21_filtered_sum_exchange_fluxes_only_alldata_Muehlbauer2020_data.csv")
rm(list = ls()) #clear out environment as needed.
setwd("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/")
library(dplyr)
library(tidyr)
library(ggplot2) # needs to be version ≥ 2.1.0
library(scales)
if (!require(GGally, quietly = TRUE)) {
getFromNamespace("install_github", asNamespace("devtools"))("ggobi/ggally")
}
if (!require(geomnet, quietly = TRUE) ||
packageVersion("geomnet") < "0.2.0") {
getFromNamespace("install_github", asNamespace("devtools"))("sctyner/geomnet")
}
if (!require(ggnetwork, quietly = TRUE) ||
packageVersion("ggnetwork") < "0.5.1") {
getFromNamespace("install_github", asNamespace("devtools"))("briatte/ggnetwork")
}
library(network)
library(sna)
library(GGally)
library(geomnet)
library(ggnetwork)
library(igraph)
data(madmen, package = "geomnet")
MMnet <- fortify(as.edgedf(madmen$edges), madmen$vertices)
View(MMnet)
View(madmen)
set.seed(10052016)
ggplot(data = MMnet, aes(from_id = from_id, to_id = to_id)) +
geom_net(aes(colour = Gender), layout.alg = "kamadakawai",
size = 2, labelon = TRUE, vjust = -0.6, ecolour = "grey60",
directed =FALSE, fontsize = 3, ealpha = 0.5) +
scale_colour_manual(values = c("#FF69B4", "#0099ff")) +
xlim(c(-0.05, 1.05)) +
theme_net() +
theme(legend.position = "bottom")
View(MMnet)
View(MMnet)
ggplot(data = MMnet, aes(from_id = from_id, to_id = to_id)) +
geom_net(aes(colour = Gender), layout.alg = "kamadakawai",
size = 2, labelon = TRUE, vjust = -0.6, ecolour = "grey60",
directed =FALSE, fontsize = 3, ealpha = 0.5)
ggplot(data = MMnet, aes(from_id = from_id, to_id = to_id))
ggplot(data = MMnet, aes(from_id = from_id, to_id = to_id)) +
geom_net(aes(colour = Gender), layout.alg = "kamadakawai")
ggplot(data = MMnet, aes(from_id = from_id, to_id = to_id)) +
geom_net()
str(MMnet)
MMnet <- sapply(MMnet, as.character)
str(MMnet) #all the columns are factors... is that bad?
set.seed(10052016)
ggplot(data = MMnet, aes(from_id = from_id, to_id = to_id)) +
geom_net(aes(colour = Gender), layout.alg = "kamadakawai",
size = 2, labelon = TRUE, vjust = -0.6, ecolour = "grey60",
directed =FALSE, fontsize = 3, ealpha = 0.5) +
scale_colour_manual(values = c("#FF69B4", "#0099ff")) +
xlim(c(-0.05, 1.05)) +
theme_net() +
theme(legend.position = "bottom")
MMnet <- fortify(as.edgedf(madmen$edges), madmen$vertices) #I think this is just pulling out a couple of columns?
#in my data, from_id would be microbe, and to_id would be host gene?
## Joining edge and node information by from_id and label respectively.
#I"m getting a weird error about "The first two columns of `x` must be of the same type." so I guess I'll set the type of all MMnet
str(MMnet) #all the columns are factors... is that bad?
library(dplyr)
MMnet<- MMnet %>%
mutate(across(everything(), as.character))
set.seed(10052016)
ggplot(data = MMnet, aes(from_id = from_id, to_id = to_id)) +
geom_net(aes(colour = Gender), layout.alg = "kamadakawai",
size = 2, labelon = TRUE, vjust = -0.6, ecolour = "grey60",
directed =FALSE, fontsize = 3, ealpha = 0.5) +
scale_colour_manual(values = c("#FF69B4", "#0099ff")) +
xlim(c(-0.05, 1.05)) +
theme_net() +
theme(legend.position = "bottom")
ggplot(data = MMnet, aes(from_id = from_id, to_id = to_id)) +
geom_net(aes(colour = Gender), layout.alg = "kamadakawai",
size = 2, labelon = TRUE, vjust = -0.6, ecolour = "grey60",
directed =TRUE, fontsize = 3, ealpha = 0.5) +
scale_colour_manual(values = c("#FF69B4", "#0099ff")) +
xlim(c(-0.05, 1.05)) +
theme_net() +
theme(legend.position = "bottom")
ggplot(data = MMnet, aes(from_id = from_id, to_id = to_id)) +
geom_net()
View(MMnet)
str(MMnet) #all the columns are factors... is that bad?
MMnet <- fortify(as.edgedf(madmen$edges), madmen$vertices) #I think this is just pulling out a couple of columns?
View(MMnet)
library(GGally)
library(network)
data(madmen, package = 'geomnet')
mm.net <- network::network(madmen$edges[, 1:2], directed = FALSE)
MMnet <- fortify(as.edgedf(madmen$edges), madmen$vertices) #I think this is just pulling out a couple of columns?
#in my data, from_id would be microbe, and to_id would be host gene?
## Joining edge and node information by from_id and label respectively.
#I"m getting a weird error about "The first two columns of `x` must be of the same type." so I guess I'll set the type of all MMnet
str(MMnet) #all the columns are factors... is that bad?
set.seed(10052016)
ggplot(data = MMnet, aes(from_id = from_id, to_id = to_id)) +
geom_net(aes(colour = Gender), layout.alg = "kamadakawai",
size = 2, labelon = TRUE, vjust = -0.6, ecolour = "grey60",
directed =FALSE, fontsize = 3, ealpha = 0.5) +
scale_colour_manual(values = c("#FF69B4", "#0099ff")) +
xlim(c(-0.05, 1.05)) +
theme_net() +
theme(legend.position = "bottom")
MMnet<- MMnet %>%
mutate(across(everything(), as.character))
ggplot(data = MMnet, aes(from_id = from_id, to_id = to_id)) +
geom_net(aes(colour = Gender), layout.alg = "kamadakawai",
size = 2, labelon = TRUE, vjust = -0.6, ecolour = "grey60",
directed =FALSE, fontsize = 3, ealpha = 0.5) +
scale_colour_manual(values = c("#FF69B4", "#0099ff")) +
xlim(c(-0.05, 1.05)) +
theme_net() +
theme(legend.position = "bottom")
View(MMnet)
